/* 

RwLocalSocket.h: Interface class for QT sockets (avoids templating QObjects). Implements a local socket

As part of the RemoteWorkers program which creates a framework for remote
management of laptops, desktop and servers. 

Copyright (C) 2012 Remote Workers Project. All rights reserved.
Created by Michal Parusinski <mparusinski@googlemail.com> on 27/07/2012.

*/

#ifndef _RWNETWORKING_RWCLIENTS_RWLOCALSOCKET_H_
#define _RWNETWORKING_RWCLIENTS_RWLOCALSOCKET_H_

#include "RwAbstractSocket.h"

#include <QByteArray>
#include <QLocalSocket>

#include "RwUtils/RwGlobal/RwClasses.h"

namespace RwNetworking {

namespace RwSocket {

////////////////////////////////////////////////////////////////////////////////
/// \brief Class for local sockets. This class is actually a proxy
///        to QT QLocalSocket. This was created to avoid mixing templates and
///        QObjects. Inherits from RwAbstractSocket.
/////////////////////////////////////////////////////////////////////////////
class RwLocalSocket : public RwAbstractSocket {

	Q_OBJECT

public:
	RwLocalSocket(QObject* parent);

	RwLocalSocket(QLocalSocket* socket);

	virtual ~RwLocalSocket();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to bytesAvailable() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual qint64 bytesAvailable();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to readAll() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual QByteArray readAll();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to abort() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual void abort();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to close() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual void close();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to write(QByteArray&) from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual qint64 write(QByteArray& data);

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to flush() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual void flush();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to waitForBytesWritten() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual bool waitForBytesWritten();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to waitForReadyRead() from QT
	////////////////////////////////////////////////////////////////////////////////
	virtual bool waitForReadyRead();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to connectToServer() from QT
	////////////////////////////////////////////////////////////////////////////////
	void connectToServer(const QString& serverName);

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Proxy to disconnectFromServer() from QT
	////////////////////////////////////////////////////////////////////////////////
	void disconnectFromServer();

public slots:
	////////////////////////////////////////////////////////////////////////////////
	/// \brief Resends signal readyRead() from QT
	////////////////////////////////////////////////////////////////////////////////
	void readReady();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Resends signal error(QLocalSocket::LocalSocketError) from QT
	////////////////////////////////////////////////////////////////////////////////
	void socketError(QLocalSocket::LocalSocketError error);

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Resends signal connected() from QT
	////////////////////////////////////////////////////////////////////////////////
	void connectedSlot();

	////////////////////////////////////////////////////////////////////////////////
	/// \brief Resends signal disconnected() from QT
	////////////////////////////////////////////////////////////////////////////////
	void disconnectedSlot();

private:
	DISALLOW_COPY_AND_ASSIGN(RwLocalSocket);

	void init();

	QLocalSocket* m_localSocket;

};

}

}

#endif // _RWNETWORKING_RWCLIENTS_RWLOCALSOCKET_H_
